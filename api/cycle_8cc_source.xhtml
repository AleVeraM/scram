<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>cycle.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cycle.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cycle_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of cycle detection specializations.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cycle_8h.xhtml">cycle.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef_1_1cycle.xhtml">scram::mef::cycle</a> {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="cycle_8cc.xhtml#aadcc06d587ab75cf72d05c8ef7dc8fee">   26</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="cycle_8cc.xhtml#aadcc06d587ab75cf72d05c8ef7dc8fee">ContinueConnector</a>(<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* connector, std::vector&lt;NamedBranch*&gt;* cycle) {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keyword">struct </span>{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">bool</span> operator()(<a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>* branch) { <span class="keywordflow">return</span> <a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(branch, cycle_); }</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordtype">bool</span> operator()(<a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork) {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>()) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="cycle_8cc.xhtml#aadcc06d587ab75cf72d05c8ef7dc8fee">ContinueConnector</a>(&amp;branch, cycle_))</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">bool</span> operator()(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>*) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    decltype(cycle) cycle_;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  } continue_connector{cycle};</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keywordflow">return</span> std::visit(continue_connector, connector-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="cycle_8cc.xhtml#a8d1dbf23cd6f7bf9ca4457c426a1cfe1">   47</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="cycle_8cc.xhtml#aadcc06d587ab75cf72d05c8ef7dc8fee">ContinueConnector</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* connector,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                       std::vector&lt;Rule*&gt;* cycle) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">struct </span>Visitor : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">struct </span>ArgSelector : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keyword">explicit</span> ArgSelector(Visitor* visitor) : visitor_(visitor) {}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite)<span class="keyword"> override </span>{ visitor_-&gt;Visit(ite); }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a>* block)<span class="keyword"> override </span>{ visitor_-&gt;Visit(block); }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* rule)<span class="keyword"> override </span>{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment">// Non-const rules are only needed to mark the nodes.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(const_cast&lt;Rule*&gt;(rule), visitor_-&gt;cycle_))</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;          <span class="keywordflow">throw</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      Visitor* visitor_;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    };</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">explicit</span> Visitor(std::vector&lt;Rule*&gt;* t_cycle)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        : cycle_(t_cycle), selector_(<span class="keyword">this</span>) {}</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite)<span class="keyword"> override </span>{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(&amp;selector_);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>())</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(&amp;selector_);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a>* block)<span class="keyword"> override </span>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : block-&gt;<a class="code" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">instructions</a>())</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        instruction-&gt;Accept(&amp;selector_);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* rule)<span class="keyword"> override </span>{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : rule-&gt;<a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">instructions</a>())</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        instruction-&gt;Accept(&amp;selector_);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::vector&lt;Rule*&gt;* cycle_;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    ArgSelector selector_;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  } visitor(cycle);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    connector-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(&amp;visitor);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keywordtype">bool</span>&amp; ret_val) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    assert(ret_val &amp;&amp; !cycle-&gt;empty());</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="cycle_8cc.xhtml#a3d93263301751ad6e79c87664427ba95">  102</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="cycle_8cc.xhtml#aadcc06d587ab75cf72d05c8ef7dc8fee">ContinueConnector</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* connector, std::vector&lt;Link*&gt;* cycle) {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keyword">struct </span>{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* branch) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      std::visit(*<span class="keyword">this</span>, branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>())</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        (*<span class="keyword">this</span>)(&amp;branch);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>* sequence) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      <span class="keyword">struct </span>Visitor : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml">NullVisitor</a> {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">explicit</span> Visitor(decltype(cycle) t_cycle) : visitor_cycle_(t_cycle) {}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>* link)<span class="keyword"> override </span>{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(const_cast&lt;Link*&gt;(link), visitor_cycle_))</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        decltype(cycle) visitor_cycle_;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      } visitor(cycle_);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : sequence-&gt;<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">instructions</a>())</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        instruction-&gt;Accept(&amp;visitor);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    decltype(cycle) cycle_;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  } continue_connector{cycle};</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    continue_connector(&amp;connector-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keywordtype">bool</span>&amp; ret_val) {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    assert(ret_val &amp;&amp; !cycle-&gt;empty());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}  <span class="comment">// namespace scram::mef::cycle</span></div><div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_a3b505b6a9e7ef49095b73d7d65446571"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">scram::mef::IfThenElse::else_instruction</a></div><div class="ttdeci">Instruction * else_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00122">instruction.h:122</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_abd842ad7d8b94120439b72ea9af71c49"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">scram::mef::IfThenElse::then_instruction</a></div><div class="ttdeci">Instruction * then_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00118">instruction.h:118</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a12aa312ac26a4fc798ff68816d9482b0"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">const Branch &amp; initial_state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00175">event_tree.h:175</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml">scram::mef::CollectExpression</a></div><div class="ttdoc">The operation of collecting expressions for event tree sequences. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00074">instruction.h:74</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml">scram::mef::Instruction</a></div><div class="ttdoc">Instructions and rules for event tree paths. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00038">instruction.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml">scram::mef::Block</a></div><div class="ttdoc">Compound instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00131">instruction.h:131</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_a7f4be95643441bdad46a15d58ad15c13"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">scram::mef::Sequence::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00043">event_tree.h:43</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml">scram::mef::IfThenElse</a></div><div class="ttdoc">Conditional application of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00103">instruction.h:103</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_ac003a658a591ba3581a74b4322df67cb"><div class="ttname"><a href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">scram::mef::cycle::DetectCycle</a></div><div class="ttdeci">bool DetectCycle(T *node, std::vector&lt; T * &gt; *cycle)</div><div class="ttdoc">Traverses nodes with connectors to find a cycle. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00131">cycle.h:131</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml">scram::mef::EventTree</a></div><div class="ttdoc">Event Tree representation with MEF constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00163">event_tree.h:163</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml">scram::mef::SetHouseEvent</a></div><div class="ttdoc">The operation to change house-events. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00055">instruction.h:55</a></div></div>
<div class="ttc" id="cycle_8cc_xhtml_aadcc06d587ab75cf72d05c8ef7dc8fee"><div class="ttname"><a href="cycle_8cc.xhtml#aadcc06d587ab75cf72d05c8ef7dc8fee">scram::mef::cycle::ContinueConnector</a></div><div class="ttdeci">bool ContinueConnector(Branch *connector, std::vector&lt; NamedBranch * &gt; *cycle)</div><div class="ttdoc">Cycle detection specialization for event tree named branches. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8cc_source.xhtml#l00026">cycle.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml_a64ff8a04a3cce0febdf9fce4cc25d19a"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">scram::mef::Instruction::Accept</a></div><div class="ttdeci">virtual void Accept(InstructionVisitor *visitor) const =0</div><div class="ttdoc">Applies the visitor to the object. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml_a78250514b4f9959087dc96f37e74eff0"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">scram::mef::Block::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00138">instruction.h:138</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml">scram::mef::Rule</a></div><div class="ttdoc">A reusable collection of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00147">instruction.h:147</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml">scram::mef::Link</a></div><div class="ttdoc">A link to another event tree in end-states only. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00174">instruction.h:174</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_1_1cycle_xhtml"><div class="ttname"><a href="namespacescram_1_1mef_1_1cycle.xhtml">scram::mef::cycle</a></div><div class="ttdef"><b>Definition:</b> <a href="cycle_8cc_source.xhtml#l00023">cycle.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml">scram::mef::CollectFormula</a></div><div class="ttdoc">The operation of connecting fault tree events into the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00089">instruction.h:89</a></div></div>
<div class="ttc" id="cycle_8h_xhtml"><div class="ttname"><a href="cycle_8h.xhtml">cycle.h</a></div><div class="ttdoc">Validation facilities to detect and print cycles in graphs. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00035">event_tree.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml">scram::mef::InstructionVisitor</a></div><div class="ttdoc">The base abstract class for instruction visitors. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00187">instruction.h:187</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml">scram::mef::Branch</a></div><div class="ttdoc">The branch representation in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00082">event_tree.h:82</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_ac82c25bb78d12a3bac21ea26cc5cdc99"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">scram::mef::Fork::paths</a></div><div class="ttdeci">const std::vector&lt; Path &gt; &amp; paths() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00153">event_tree.h:153</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml">scram::mef::NullVisitor</a></div><div class="ttdoc">Visits only instructions and ignores non-instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00216">instruction.h:216</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a2d5ae6a8ba8ca8f81818d4c12172a5b5"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">scram::mef::Branch::target</a></div><div class="ttdeci">void target(Target target)</div><div class="ttdoc">Sets the target for the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00098">event_tree.h:98</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NamedBranch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NamedBranch.xhtml">scram::mef::NamedBranch</a></div><div class="ttdoc">Named branches that can be referenced and reused. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00114">event_tree.h:114</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml">scram::mef::Fork</a></div><div class="ttdoc">Functional event forks. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00140">event_tree.h:140</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml_a6094da386afbd31ffa1843dc270a0e0f"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">scram::mef::Rule::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00157">instruction.h:157</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jul 25 2018 21:51:11 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
